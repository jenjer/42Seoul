!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
LIBFT_H	header/libft.h	/^# define LIBFT_H$/;"	d
PUSH_SWAP_H	header/push_swap.h	/^# define PUSH_SWAP_H$/;"	d
bubble_sort	sorting.c	/^int	*bubble_sort(int *arr, int size)$/;"	f
check_five	algorithm.c	/^int	check_five(t_list *root1)$/;"	f
check_limit	libft/ft_printf_util.c	/^int	check_limit(void *arg, int flag)$/;"	f
count_max	libft/ft_strlcpy.c	/^static int	count_max(const char *arr)$/;"	f	file:
count_num_len	libft/ft_itoa.c	/^static int	count_num_len(int n)$/;"	f	file:
counting_word	libft/ft_split.c	/^static size_t	counting_word(char const *s, char c)$/;"	f	file:
cpy	libft/ft_memmove.c	/^static void	cpy(unsigned char *udst, unsigned char *usrc, size_t len)$/;"	f	file:
cpy_string	libft/ft_split.c	/^static char	*cpy_string(const char *s, char c)$/;"	f	file:
data	header/libft.h	/^	int				data;$/;"	m	struct:s_list
do_run	push_swap_util.c	/^int	do_run(t_list *root1, int argc)$/;"	f
err_check	libft/ft_printf.c	/^int	err_check(const char *str, va_list ap)$/;"	f
error_check	push_swap.c	/^int	error_check(int argc, char *argv[])$/;"	f
find_small	algorithm2.c	/^int find_small(t_list *root1, int size)$/;"	f
ft_atoi	libft/ft_atoi.c	/^long	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst)$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst)$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst)$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(int data)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int nb, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
hard_coding	algorithm2.c	/^void hard_coding(t_list **root1, t_list **root2, int size)$/;"	f
inserting	libft/ft_split.c	/^static char	**inserting(char **ret, size_t count_word, char const *s, char c)$/;"	f	file:
main	main.c	/^int	main(int argc, char *argv[])$/;"	f
make_ans	algorithm.c	/^int make_ans(t_list *root1, int size)$/;"	f
make_arr	sorting.c	/^int	*make_arr(t_list *root)$/;"	f
make_hex	libft/ft_printf.c	/^char	*make_hex(size_t t_temp, char *hex)$/;"	f
make_list_index	sorting.c	/^void	make_list_index(t_list *root, int *sorted, int size)$/;"	f
max	push_swap.c	/^int	max(char *str)$/;"	f
next	header/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
node_to_arr	sorting.c	/^int	*node_to_arr(t_list *root)$/;"	f
overlaped	push_swap.c	/^int	overlaped(t_list *root)$/;"	f
pa	function_1.c	/^void pa(t_list **root1, t_list **root2)$/;"	f
pb	function_1.c	/^void pb(t_list **root1, t_list **root2)$/;"	f
print_anything	libft/ft_printf_util.c	/^int	print_anything(int arg, char *degree, char *print, int index)$/;"	f
print_decimal	libft/ft_printf_util.c	/^int	print_decimal(va_list ap)$/;"	f
print_hex	libft/ft_printf_util.c	/^int	print_hex(va_list ap, int flag)$/;"	f
print_memo	libft/ft_printf.c	/^int	print_memo(va_list ap)$/;"	f
print_str	libft/ft_printf.c	/^int	print_str(va_list ap, int flag)$/;"	f
print_udecimal	libft/ft_printf_util.c	/^int	print_udecimal(va_list ap)$/;"	f
push_swap	push_swap.c	/^int	push_swap(int argc, char *argv[])$/;"	f
ra	function_2.c	/^void ra(t_list **root1, int flag)$/;"	f
rb	function_3.c	/^void	rb(t_list **root2, int flag)$/;"	f
rr	function_2.c	/^void rr(t_list **root1, t_list **root2)$/;"	f
rra	function_2.c	/^void rra(t_list **root1, int flag)$/;"	f
rrb	function_3.c	/^void	rrb(t_list **root2, int flag)$/;"	f
rrr	function_2.c	/^void rrr(t_list **root1, t_list **root2)$/;"	f
s_list	header/libft.h	/^typedef struct s_list$/;"	s
sa	function_1.c	/^void sa(t_list *root1, int flag)$/;"	f
sb	function_2.c	/^void sb(t_list *root2, int flag)$/;"	f
sort_all	push_swap_util.c	/^void sort_all(t_list **root1, t_list **root2, int size)$/;"	f
sort_num_3	algorithm2.c	/^void sort_num_3(t_list **root1, int large)$/;"	f
sort_num_4	algorithm2.c	/^void sort_num_4(t_list **root1, t_list **root2, int size)$/;"	f
sort_num_5	algorithm2.c	/^void sort_num_5(t_list **root1, t_list **root2, int size)$/;"	f
sorting_all_list	algorithm.c	/^void sorting_all_list(t_list **root1, t_list **root2, int size)$/;"	f
ss	function_1.c	/^void ss(t_list *root1, t_list *root2)$/;"	f
start	libft/ft_atoi.c	/^static int	start(const char *str, size_t *i)$/;"	f	file:
t_list	header/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
